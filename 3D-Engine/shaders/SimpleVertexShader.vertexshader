//#version 330 core
//
//// Input vertex data, different for all executions of this shader.
//layout(location = 0) in vec3 vertexPosition_modelspace;
//layout(location = 1) in vec2 vertexUV;
//layout(location = 2) in vec4 color;
//
//// Output data ; will be interpolated for each fragment.
//out vec2 UV;
//out DATA
//{
//	vec4 color;
//} vs_out;
//// Values that stay constant for the whole mesh.
//uniform mat4 MVP;
//
//void main(){
//
//	// Output position of the vertex, in clip space : MVP * position
//	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
//
//	// The color of each vertex will be interpolated
//	// to produce the color of each fragment
//	UV = vertexUV;
//	vs_out.color = color;
//}
#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec4 color;

uniform mat4 MVP;

out DATA
{
	vec4 position;
	vec4 color;
	vec2 UV;

} vs_out;

void main()
{
	gl_Position = MVP  * vec4(vertexPosition_modelspace, 1);
	vs_out.position = MVP  * vec4(vertexPosition_modelspace, 1);
	vs_out.color = color;
	vs_out.UV = vertexUV;
}